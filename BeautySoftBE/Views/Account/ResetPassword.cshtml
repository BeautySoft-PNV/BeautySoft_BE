@model BeautySoftBE.Application.DTOs.ResetPasswordRequest
@{
    ViewData["Title"] = "Đặt lại mật khẩu";
    Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>

<div class="container mt-5">
    <h2 class="text-center">Reset Password</h2>

    <form id="resetPasswordForm" class="mt-3">
        <input type="hidden" id="token" value="@Model.Token" />
        <input type="hidden" id="email" value="@Model.Email" />

        <div class="form-group">
            <label>New Password</label>
            <input type="password" class="form-control" id="newPassword" required />
            <small class="text-danger" id="errorMessage"></small>
        </div>

        <button type="submit" class="btn btn-success mt-2 w-100">Reset Password</button>
    </form>

    <div id="successMessage" class="alert alert-success mt-2 d-none text-center"></div>
</div>

<script>
    document.getElementById("resetPasswordForm").addEventListener("submit", async function (e) {
        e.preventDefault(); 

        let token = document.getElementById("token").value;
        let email = document.getElementById("email").value;
        let newPassword = document.getElementById("newPassword").value;
        let submitButton = this.querySelector("button");

        if (!token) {
            document.getElementById("errorMessage").innerText = "Token không hợp lệ!";
            return;
        }

        let formData = new FormData();
        formData.append("Token", token);
        formData.append("Email", email);
        formData.append("NewPassword", newPassword);

        submitButton.disabled = true; 

        try {
            let response = await fetch("@Url.Action("ResetPassword", "Account")", {
                method: "POST",
                body: formData,
                headers: {
                    "Authorization": `Bearer ${token}`
                }
            });

            if (response.status === 401) {
                throw new Error("Token expired or invalid!");
            }

            let result = await response.json();
            submitButton.disabled = false;

            if (!response.ok) {
                document.getElementById("errorMessage").innerText = result.message || "An error occurred!";
                document.getElementById("successMessage").classList.add("d-none");
            } else {
                document.getElementById("successMessage").innerText = result.message;
                document.getElementById("successMessage").classList.remove("d-none");
                document.getElementById("errorMessage").innerText = "";
            }
        } catch (error) {
            submitButton.disabled = false;
            document.getElementById("errorMessage").innerText = error.message || "An error occurred!";
        }
    });
</script>

</body>
</html>
